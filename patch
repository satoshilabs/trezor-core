From 8e62fb0ea08075d56e589a109fcf9be2a19d91ca Mon Sep 17 00:00:00 2001
From: Juraj Selep <jurajselep@gmail.com>
Date: Fri, 15 Jun 2018 00:52:12 -0400
Subject: Added Tezos integration


diff --git a/src/apps/tezos/__init__.py b/src/apps/tezos/__init__.py
new file mode 100644
index 00000000..6d6241b5
--- /dev/null
+++ b/src/apps/tezos/__init__.py
@@ -0,0 +1,23 @@
+from trezor.wire import register, protobuf_workflow
+from trezor.messages.wire_types import TezosGetAddress, TezosSignTx, TezosGetPublicKey
+
+
+def dispatch_TezosGetAddress(*args, **kwargs):
+    from .get_address import tezos_get_address
+    return tezos_get_address(*args, **kwargs)
+
+
+def dispatch_TezosSignTx(*args, **kwargs):
+    from .sign_tx import tezos_sign_tx
+    return tezos_sign_tx(*args, **kwargs)
+
+
+def dispatch_TezosGetPublicKey(*args, **kwargs):
+    from .get_public_key import tezos_get_public_key
+    return tezos_get_public_key(*args, **kwargs)
+
+
+def boot():
+    register(TezosGetAddress, protobuf_workflow, dispatch_TezosGetAddress)
+    register(TezosSignTx, protobuf_workflow, dispatch_TezosSignTx)
+    register(TezosGetPublicKey, protobuf_workflow, dispatch_TezosGetPublicKey)
diff --git a/src/apps/tezos/get_address.py b/src/apps/tezos/get_address.py
new file mode 100644
index 00000000..dcd28e63
--- /dev/null
+++ b/src/apps/tezos/get_address.py
@@ -0,0 +1,26 @@
+from apps.common import seed
+from apps.wallet.get_address import _show_address, _show_qr
+from trezor.crypto import hashlib
+from trezor.messages.TezosAddress import TezosAddress
+from trezor.crypto.curve import ed25519
+
+from apps.tezos.helpers import b58cencode, TEZOS_CURVE
+
+
+async def tezos_get_address(ctx, msg):
+    address_n = msg.address_n or ()
+    node = await seed.derive_node(ctx, address_n, TEZOS_CURVE)
+
+    sk = node.private_key()
+    pk = ed25519.publickey(sk)
+    pkh = hashlib.blake2b(pk, 20).digest()
+    address = b58cencode(pkh, prefix='tz1')
+
+    if msg.show_display:
+        while True:
+            if await _show_address(ctx, address):
+                break
+            if await _show_qr(ctx, address):
+                break
+
+    return TezosAddress(address=address)
diff --git a/src/apps/tezos/get_public_key.py b/src/apps/tezos/get_public_key.py
new file mode 100644
index 00000000..c8629f44
--- /dev/null
+++ b/src/apps/tezos/get_public_key.py
@@ -0,0 +1,19 @@
+from apps.common import seed
+from trezor.messages.TezosPublicKey import TezosPublicKey
+from trezor.crypto.curve import ed25519
+from apps.wallet.get_public_key import _show_pubkey
+
+from apps.tezos.helpers import TEZOS_CURVE
+
+
+async def tezos_get_public_key(ctx, msg):
+    address_n = msg.address_n or ()
+    node = await seed.derive_node(ctx, address_n, TEZOS_CURVE)
+            
+    sk = node.private_key()
+    pk = ed25519.publickey(sk)
+
+    if msg.show_display:
+        await _show_pubkey(ctx, pk)
+
+    return TezosPublicKey(public_key=pk)
diff --git a/src/apps/tezos/helpers.py b/src/apps/tezos/helpers.py
new file mode 100644
index 00000000..1bfad282
--- /dev/null
+++ b/src/apps/tezos/helpers.py
@@ -0,0 +1,27 @@
+from trezor.crypto import base58
+
+
+PREFIXES = {
+    'tz1': [6, 161, 159],
+    'edpk': [13, 15, 37, 217],
+    'edsk': [43, 246, 78, 7],
+    'edsig': [9, 245, 205, 134, 18],
+    'o': [5, 116]
+}
+
+TEZOS_CURVE = 'ed25519'
+
+
+def b58cencode(payload, prefix=None):
+    payload = list(payload)
+    result = payload
+    if prefix is not None:
+        result = PREFIXES[prefix] + payload
+    return base58.encode_check(bytes(result))
+
+
+def b58cdecode(enc, prefix=None):
+    decoded = base58.decode_check(enc)
+    if prefix is not None:
+        decoded = decoded[len(PREFIXES[prefix]):]
+    return decoded
diff --git a/src/apps/tezos/layout.py b/src/apps/tezos/layout.py
new file mode 100644
index 00000000..4a53da25
--- /dev/null
+++ b/src/apps/tezos/layout.py
@@ -0,0 +1,32 @@
+from apps.common.confirm import *
+from trezor import ui
+from trezor.utils import chunks
+from trezor.messages import ButtonRequestType
+from trezor.ui.text import Text
+
+
+async def require_confirm_tx(ctx, to, value):
+    content = Text('Confirm sending', ui.ICON_SEND,
+                   ui.BOLD, format_amount(value),
+                   ui.NORMAL, 'to',
+                   ui.MONO, *split_address(to),
+                   icon_color=ui.GREEN)
+    return await require_confirm(ctx, content, ButtonRequestType.SignTx)
+
+
+async def require_confirm_fee(ctx, value, fee):
+    content = Text('Confirm transaction', ui.ICON_SEND,
+                   ui.BOLD, format_amount(value),
+                   ui.NORMAL, 'fee:',
+                   ui.BOLD, format_amount(fee),
+                   icon_color=ui.GREEN)
+    await require_hold_to_confirm(ctx, content, ButtonRequestType.SignTx)
+
+
+def split_address(address):
+    return chunks(address, 17)
+
+
+def format_amount(value):
+    # TODO: check if value has to be divided by some number
+    return '%s XTZ' % value
diff --git a/src/apps/tezos/sign_tx.py b/src/apps/tezos/sign_tx.py
new file mode 100644
index 00000000..4caae33b
--- /dev/null
+++ b/src/apps/tezos/sign_tx.py
@@ -0,0 +1,27 @@
+from apps.common import seed
+from trezor.messages.TezosSignedTx import TezosSignedTx
+from trezor.crypto import hashlib
+from trezor.crypto.curve import ed25519
+
+from apps.tezos.helpers import b58cencode, TEZOS_CURVE
+from apps.tezos.layout import *
+
+
+async def tezos_sign_tx(ctx, msg):
+    address_n = msg.address_n or ()
+    node = await seed.derive_node(ctx, address_n, TEZOS_CURVE)
+
+    operation_bytes = msg.operation_bytes
+    operation_hashed_bytes = hashlib.blake2b(operation_bytes, 32).digest()
+    signature = ed25519.sign(node.private_key(), operation_hashed_bytes)
+
+    sig_op_contents = operation_bytes + signature
+    sig_op_contents_blaked = hashlib.blake2b(sig_op_contents, 32).digest()
+    operation_hash = b58cencode(sig_op_contents_blaked, prefix='o')
+
+    await require_confirm_tx(ctx, msg.to, msg.value)
+    await require_confirm_fee(ctx, msg.value, msg.fee)
+
+    return TezosSignedTx(signature=signature,
+                         sig_op_contents=sig_op_contents,
+                         operation_hash=operation_hash)
diff --git a/src/main.py b/src/main.py
index 0c239327..8576e127 100644
--- a/src/main.py
+++ b/src/main.py
@@ -11,6 +11,7 @@ import apps.homescreen
 import apps.management
 import apps.wallet
 import apps.ethereum
+import apps.tezos
 import apps.lisk
 import apps.nem
 if __debug__:
@@ -23,6 +24,7 @@ apps.homescreen.boot()
 apps.management.boot()
 apps.wallet.boot()
 apps.ethereum.boot()
+apps.tezos.boot()
 apps.lisk.boot()
 apps.nem.boot()
 if __debug__:
diff --git a/src/trezor/messages/MessageType.py b/src/trezor/messages/MessageType.py
index bed0c354..6e781b75 100644
--- a/src/trezor/messages/MessageType.py
+++ b/src/trezor/messages/MessageType.py
@@ -93,6 +93,12 @@ LiskMessageSignature = 119
 LiskVerifyMessage = 120
 LiskGetPublicKey = 121
 LiskPublicKey = 122
+TezosGetAddress = 150
+TezosAddress = 151
+TezosSignTx = 152
+TezosSignedTx = 153
+TezosGetPublicKey = 154
+TezosPublicKey = 155
 StellarGetPublicKey = 200
 StellarPublicKey = 201
 StellarSignTx = 202
diff --git a/src/trezor/messages/TezosAddress.py b/src/trezor/messages/TezosAddress.py
new file mode 100644
index 00000000..d48244a2
--- /dev/null
+++ b/src/trezor/messages/TezosAddress.py
@@ -0,0 +1,15 @@
+# Automatically generated by pb2py
+import protobuf as p
+
+
+class TezosAddress(p.MessageType):
+    MESSAGE_WIRE_TYPE = 151
+    FIELDS = {
+        1: ('address', p.UnicodeType, 0),  # required
+    }
+
+    def __init__(
+        self,
+        address: str = None
+    ) -> None:
+        self.address = address
diff --git a/src/trezor/messages/TezosGetAddress.py b/src/trezor/messages/TezosGetAddress.py
new file mode 100644
index 00000000..8fcecbaf
--- /dev/null
+++ b/src/trezor/messages/TezosGetAddress.py
@@ -0,0 +1,23 @@
+# Automatically generated by pb2py
+import protobuf as p
+if __debug__:
+    try:
+        from typing import List
+    except ImportError:
+        List = None
+
+
+class TezosGetAddress(p.MessageType):
+    MESSAGE_WIRE_TYPE = 150
+    FIELDS = {
+        1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
+        2: ('show_display', p.BoolType, 0),
+    }
+
+    def __init__(
+        self,
+        address_n: List[int] = None,
+        show_display: bool = None
+    ) -> None:
+        self.address_n = address_n if address_n is not None else []
+        self.show_display = show_display
diff --git a/src/trezor/messages/TezosGetPublicKey.py b/src/trezor/messages/TezosGetPublicKey.py
new file mode 100644
index 00000000..9c87d58e
--- /dev/null
+++ b/src/trezor/messages/TezosGetPublicKey.py
@@ -0,0 +1,23 @@
+# Automatically generated by pb2py
+import protobuf as p
+if __debug__:
+    try:
+        from typing import List
+    except ImportError:
+        List = None
+
+
+class TezosGetPublicKey(p.MessageType):
+    MESSAGE_WIRE_TYPE = 154
+    FIELDS = {
+        1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
+        2: ('show_display', p.BoolType, 0),
+    }
+
+    def __init__(
+        self,
+        address_n: List[int] = None,
+        show_display: bool = None
+    ) -> None:
+        self.address_n = address_n if address_n is not None else []
+        self.show_display = show_display
diff --git a/src/trezor/messages/TezosPublicKey.py b/src/trezor/messages/TezosPublicKey.py
new file mode 100644
index 00000000..32d70f19
--- /dev/null
+++ b/src/trezor/messages/TezosPublicKey.py
@@ -0,0 +1,15 @@
+# Automatically generated by pb2py
+import protobuf as p
+
+
+class TezosPublicKey(p.MessageType):
+    MESSAGE_WIRE_TYPE = 155
+    FIELDS = {
+        1: ('public_key', p.BytesType, 0),
+    }
+
+    def __init__(
+        self,
+        public_key: bytes = None
+    ) -> None:
+        self.public_key = public_key
diff --git a/src/trezor/messages/TezosSignTx.py b/src/trezor/messages/TezosSignTx.py
new file mode 100644
index 00000000..61342a78
--- /dev/null
+++ b/src/trezor/messages/TezosSignTx.py
@@ -0,0 +1,32 @@
+# Automatically generated by pb2py
+import protobuf as p
+if __debug__:
+    try:
+        from typing import List
+    except ImportError:
+        List = None
+
+
+class TezosSignTx(p.MessageType):
+    MESSAGE_WIRE_TYPE = 152
+    FIELDS = {
+        1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
+        2: ('operation_bytes', p.BytesType, 0),
+        3: ('to', p.UnicodeType, 0),
+        4: ('value', p.UVarintType, 0),
+        5: ('fee', p.UVarintType, 0),
+    }
+
+    def __init__(
+        self,
+        address_n: List[int] = None,
+        operation_bytes: bytes = None,
+        to: str = None,
+        value: int = None,
+        fee: int = None
+    ) -> None:
+        self.address_n = address_n if address_n is not None else []
+        self.operation_bytes = operation_bytes
+        self.to = to
+        self.value = value
+        self.fee = fee
diff --git a/src/trezor/messages/TezosSignedTx.py b/src/trezor/messages/TezosSignedTx.py
new file mode 100644
index 00000000..861aa408
--- /dev/null
+++ b/src/trezor/messages/TezosSignedTx.py
@@ -0,0 +1,21 @@
+# Automatically generated by pb2py
+import protobuf as p
+
+
+class TezosSignedTx(p.MessageType):
+    MESSAGE_WIRE_TYPE = 153
+    FIELDS = {
+        1: ('signature', p.BytesType, 0),
+        2: ('sig_op_contents', p.BytesType, 0),
+        3: ('operation_hash', p.UnicodeType, 0),
+    }
+
+    def __init__(
+        self,
+        signature: bytes = None,
+        sig_op_contents: bytes = None,
+        operation_hash: str = None
+    ) -> None:
+        self.signature = signature
+        self.sig_op_contents = sig_op_contents
+        self.operation_hash = operation_hash
diff --git a/src/trezor/messages/wire_types.py b/src/trezor/messages/wire_types.py
index bed0c354..6e781b75 100644
--- a/src/trezor/messages/wire_types.py
+++ b/src/trezor/messages/wire_types.py
@@ -93,6 +93,12 @@ LiskMessageSignature = 119
 LiskVerifyMessage = 120
 LiskGetPublicKey = 121
 LiskPublicKey = 122
+TezosGetAddress = 150
+TezosAddress = 151
+TezosSignTx = 152
+TezosSignedTx = 153
+TezosGetPublicKey = 154
+TezosPublicKey = 155
 StellarGetPublicKey = 200
 StellarPublicKey = 201
 StellarSignTx = 202
 